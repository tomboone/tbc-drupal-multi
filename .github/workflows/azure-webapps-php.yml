#file: noinspection UndefinedAction,UndefinedParamsPresent
name: Build and deploy PHP app to Azure Web App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_USE_OIDC: true

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      prod_database_names: ${{ steps.tf-output.outputs.prod_database_names }}
      stage_database_names: ${{ steps.tf-output.outputs.stage_database_names }}
      storage_account_name: ${{ steps.tf-output.outputs.storage_account_name }}
      webapp_name: ${{ steps.tf-output.outputs.webapp_name }}
      php_version: ${{ steps.tf-output.outputs.php_version }}
      stage_slot_name: ${{ steps.tf-output.outputs.stage_slot_name }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"
          terraform_wrapper: false
      
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
      
      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan
      
      - name: Get Terraform Outputs
        id: tf-output
        working-directory: terraform
        run: |
          echo "prod_database_names=$(terraform output -json prod_database_names)" >> $GITHUB_OUTPUT
          echo "stage_database_names=$(terraform output -json stage_database_names)" >> $GITHUB_OUTPUT
          echo "storage_account_name=$(terraform output -raw storage_account_name)" >> $GITHUB_OUTPUT
          echo "webapp_name=$(terraform output -raw webapp_name)" >> $GITHUB_OUTPUT
          echo "php_version=$(terraform output -raw php_version)" >> $GITHUB_OUTPUT
          echo "stage_slot_name=$(terraform output -raw stage_slot_name)" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ needs.terraform.outputs.php_version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd, curl, zip, opcache
          coverage: none
          tools: composer:v2

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor/
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-

      - name: Install Composer dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist
          composer dump-autoload --optimize --classmap-authoritative

      - name: Clean up development files
        run: |
          # Remove development and CI files
          rm -rf .git/ .github/ tests/ .gitignore
          rm -f README.md CHANGELOG.md phpunit.xml .phpunit.xml
          rm -f composer.json composer.lock package.json package-lock.json

          # Remove Drupal development files
          find . -name "*.orig" -delete
          find . -name "*.tmp" -delete
          find . -name ".DS_Store" -delete
          find . -name "Thumbs.db" -delete

          # Remove empty directories
          find . -type d -empty -delete 2>/dev/null || true

          # Clean Drupal cache and temp files
          rm -rf web/sites/default/files/php/
          rm -rf web/sites/default/files/css/
          rm -rf web/sites/default/files/js/
          rm -rf private/temp/

      - name: Set production file permissions
        run: |
          # Set proper permissions for Drupal
          find . -type f -exec chmod 644 {} \;
          find . -type d -exec chmod 755 {} \;

          # Make sure files directory is writable
          if [ -d "web/sites/default/files" ]; then
            chmod -R 775 web/sites/default/files/
          fi

      - name: Generate sites.php from Terraform outputs
        run: |
          # Create sites.php with header
          cat > web/sites/sites.php << 'EOF'
          <?php
          $sites = [];
          $sites_storage_path = '/mnt/sites';
          
          // Auto-generated site mappings from Terraform
          EOF
          
          # Append production site mappings using Terraform job output
          echo '${{ needs.terraform.outputs.prod_database_names }}' | jq -r '
          to_entries[] | 
          "$sites[\"" + .key + ".com\"] = \"../../../mnt/sites/" + .key + "\";"
          ' >> web/sites/sites.php
          
          # Close PHP tag
          echo '?>' >> web/sites/sites.php
          
          # Show generated file for debugging
          echo "Generated sites.php:"
          cat web/sites/sites.php

      - name: Create deployment info
        run: |
          echo "Build Date: $(date)" > deployment-info.txt
          echo "Commit: ${{ github.sha }}" >> deployment-info.txt
          echo "Branch: ${{ github.ref_name }}" >> deployment-info.txt
          echo "Build Number: ${{ github.run_number }}" >> deployment-info.txt

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: |
            .
            !node_modules/
            !.git/
          retention-days: 30
          compression-level: 6

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: [terraform, build]
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    # Add deployment timeout
    timeout-minutes: 30

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: php-app

      - name: Warm up Azure App Service (Stage Slot)
        run: |
          echo "Warming up App Service Stage Slot..."
          curl -f "https://${{ needs.terraform.outputs.webapp_name }}-${{ needs.terraform.outputs.stage_slot_name }}.azurewebsites.net" \
            --connect-timeout 10 --max-time 30 || echo "Warmup failed, continuing..."

      - name: Deploy to Azure Web App (Stage Slot)
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ needs.terraform.outputs.webapp_name }}
          slot-name: ${{ needs.terraform.outputs.stage_slot_name }}
          package: .
          timeout: 1800000  # 30 minutes in milliseconds

      - name: Run Drush Deploy on Stage Slot
        run: |
          echo "Running Drush deploy commands on stage slot..."
          
          # Get site names from Terraform output
          SITES=$(echo '${{ needs.terraform.outputs.prod_database_names }}' | jq -r 'keys[]')
          
          for site in $SITES; do
            echo "Running drush deploy for site: $site"
            
            # Run drush deploy via Azure CLI (connects to the stage slot)
            az webapp ssh --name ${{ needs.terraform.outputs.webapp_name }} \
              --slot ${{ needs.terraform.outputs.stage_slot_name }} \
              --command "cd /home/site/wwwroot && drush --uri=$site.local deploy -v" \
              || echo "Warning: Drush deploy failed for $site"
          done
          
          echo "âœ… Drush deploy completed for all sites"

      - name: Health check after deployment (Stage Slot)
        run: |
          echo "Performing health check on stage slot..."
          for i in {1..5}; do
            if curl -f "https://${{ needs.terraform.outputs.webapp_name }}-${{ needs.terraform.outputs.stage_slot_name }}.azurewebsites.net" \
                --connect-timeout 10 --max-time 30; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying..."
              sleep 30
            fi
            if [ $i -eq 5 ]; then
              echo "Health check failed after 5 attempts"
              exit 1
            fi
          done
