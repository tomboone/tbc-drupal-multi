#file: noinspection UndefinedAction,UndefinedParamsPresent
name: Build and deploy PHP app to Azure Web App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_USE_OIDC: true
  TF_VAR_existing_vnet_name: ${{ secrets.EXISTING_VNET_NAME }}
  TF_VAR_existing_vnet_rg_name: ${{ secrets.EXISTING_VNET_RG_NAME }}
  TF_VAR_existing_app_service_plan_name: ${{ secrets.EXISTING_APP_SERVICE_PLAN_NAME }}
  TF_VAR_existing_app_service_plan_resource_group: ${{ secrets.EXISTING_APP_SERVICE_PLAN_RESOURCE_GROUP }}
  TF_VAR_existing_mysql_flexible_server_name: ${{ secrets.EXISTING_MYSQL_FLEXIBLE_SERVER_NAME }}
  TF_VAR_existing_log_analytics_workspace_name: ${{ secrets.EXISTING_LOG_ANALYTICS_WORKSPACE_NAME }}
  TF_VAR_existing_log_analytics_workspace_rg_name: ${{ secrets.EXISTING_LOG_ANALYTICS_WORKSPACE_RG_NAME }}
  TF_VAR_existing_mysql_flexible_server_rg_name: ${{ secrets.EXISTING_MYSQL_FLEXIBLE_SERVER_RG_NAME }}
  TF_VAR_mysql_admin_password: ${{ secrets.MYSQL_ADMIN_PASSWORD }}
  TF_VAR_mysql_admin_username: ${{ secrets.MYSQL_ADMIN_USERNAME }}
  TF_WORKING_DIR: ./terraform

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    outputs:
      webapp_name: ${{ steps.tf-output.outputs.webapp_name }}
      php_version: ${{ steps.tf-output.outputs.php_version }}
      stage_slot_name: ${{ steps.tf-output.outputs.stage_slot_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}"

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: tf-output
        working-directory: terraform
        run: |
          echo "webapp_name=$(terraform output -raw webapp_name)" >> $GITHUB_OUTPUT
          echo "php_version=$(terraform output -raw php_version)" >> $GITHUB_OUTPUT
          echo "stage_slot_name=$(terraform output -raw stage_slot_name)" >> $GITHUB_OUTPUT

  build:
    name: Build Drupal app package
    runs-on: ubuntu-latest
    needs: terraform
    env:
      PHP_VERSION: ${{ needs.terraform.outputs.php_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd, curl, zip, opcache
          coverage: none
          tools: composer:v2

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor/
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-

      - name: Install Composer dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist
          composer dump-autoload --optimize --classmap-authoritative

      - name: Clean up development files
        run: |
          # Remove development and CI files
          rm -rf .git/ .github/ tests/ .gitignore
          rm -f README.md CHANGELOG.md phpunit.xml .phpunit.xml
          rm -f composer.json composer.lock package.json package-lock.json

          # Remove Drupal development files
          find . -name "*.orig" -delete
          find . -name "*.tmp" -delete
          find . -name ".DS_Store" -delete
          find . -name "Thumbs.db" -delete

          # Remove empty directories
          find . -type d -empty -delete 2>/dev/null || true

          # Clean Drupal cache and temp files
          rm -rf web/sites/default/files/php/
          rm -rf web/sites/default/files/css/
          rm -rf web/sites/default/files/js/
          rm -rf private/temp/

      - name: Set production file permissions
        run: |
          # Set proper permissions for Drupal
          find . -type f -exec chmod 644 {} \;
          find . -type d -exec chmod 755 {} \;

          # Make sure files directory is writable
          if [ -d "web/sites/default/files" ]; then
            chmod -R 775 web/sites/default/files/
          fi

      - name: Create deployment info
        run: |
          echo "Build Date: $(date)" > deployment-info.txt
          echo "Commit: ${{ github.sha }}" >> deployment-info.txt
          echo "Branch: ${{ github.ref_name }}" >> deployment-info.txt
          echo "Build Number: ${{ github.run_number }}" >> deployment-info.txt

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: |
            .
            !node_modules/
            !.git/
          retention-days: 30
          compression-level: 6

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [terraform, build]
    environment: staging
    env:
      APP_NAME: ${{ needs.terraform.outputs.webapp_name }}
      SLOT_NAME: ${{ needs.terraform.outputs.stage_slot_name }}

    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: php-app

      - name: Deploy to Azure Web App (Stage Slot)
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          slot-name: ${{ env.SLOT_NAME }}
          package: .
